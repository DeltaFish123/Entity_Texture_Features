import java.util.function.Consumer
import java.util.jar.JarEntry
import java.util.jar.JarOutputStream
import java.util.zip.ZipFile

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id "systems.manifold.manifold-gradle-plugin" version "0.0.2-alpha"
}


private void setupPreProcess(def index){
    def keys ="""
    MC_18 = 0
    MC_19_2 = 1
    MC_19_4 = 2
    MC_20_1 = 3
    MC_20_2 = 4
    MC_20_4 = 5
    MC_20_6 = 6
    MC = ${index}
    """
    File props = new File(projectDir,"build.properties")
    println props.path
    props.text = keys

    File indexProps = new File(projectDir,"property_variants/${index}.properties")
    Properties properties = new Properties()
    properties.load(indexProps.newDataInputStream())
    properties.forEach { key, value ->
        gradle.rootProject.setProperty(key as String, value)
    }

}
//move to settings for include logic


setupPreProcess(rootProject.mc_build)


architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "systems.manifold.manifold-gradle-plugin"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"

        if(rootProject.parchment_version != "no") {
            println "Using Parchment mappings"
            mappings loom.layered() {
                officialMojangMappings()
                parchment("org.parchmentmc.data:parchment-${parchment_version}@zip")
            }
        }else{
            println "Not using Parchment mappings"
            mappings loom.officialMojangMappings()
        }

        implementation group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.10'
        implementation 'com.demonwav.mcdev:annotations:2.1.0'

        //https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-preprocessor#setup
        annotationProcessor 'systems.manifold:manifold-preprocessor:2024.1.13'
        testAnnotationProcessor 'systems.manifold:manifold-preprocessor:2024.1.13'

    }
    processResources {
        inputs.property "version", rootProject.mod_version
        inputs.property "compatible_mc_fabric", rootProject.compatible_mc_fabric
        inputs.property "compatible_mc_forge", rootProject.compatible_mc_forge

        filesMatching("fabric.mod.json") {
            expand(["version": rootProject.mod_version,
                    "compatible_mc_fabric": rootProject.compatible_mc_fabric])
        }

        filesMatching("META-INF/mods.toml") {
            expand(["version": rootProject.mod_version,
                    "compatible_mc_forge": rootProject.compatible_mc_forge])
        }

        filesMatching("META-INF/neoforge.mods.toml") {
            expand(["version": rootProject.mod_version,
                    "compatible_mc_forge": rootProject.compatible_mc_forge])
        }

    }

}



allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"
    apply plugin: "systems.manifold.manifold-gradle-plugin"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group


    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven {url = "https://api.modrinth.com/maven"}
        maven {url = "https://www.cursemaven.com/"}
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.terraformersmc.com/releases/" }
        maven { url "https://mvnrepository.com/artifact/com.demonwav.mcdev/annotations" }
        maven { url "https://maven.parchmentmc.org" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }


    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = rootProject.java_version as int

        //pre processor args
        options.compilerArgs += ["-Xplugin:Manifold"]

//        options.compilerArgs += ["-Xlint:deprecation"]
    }
//    compileJava.options.fork = true
//    compileJava.options.forkOptions.executable = 'C:/Program Files/Java/jdk-17.0.3.1/'
    java {
        withSourcesJar()
    }


}


